{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-79e126b42b825efa.js","node_modules/@parcel/runtime-js/lib/runtime-16e38bc0a9bac482.js","content/js/countdown-timer.js","content/js/current-year.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"8e5YU\\\":\\\"index.45b7b835.js\\\",\\\"4KebH\\\":\\\"alarm-sound.982ed33f.mp3\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4KebH\")).toString();","/* eslint-disable import/no-unresolved */\r\nimport alarmSound from 'url:../assets/sound/alarm-sound.mp3';\r\n\r\n// Chaching needed Dom Elements\r\nconst countDownInputs = window.document.querySelectorAll('.count-down');\r\nconst countDownHoursInput = window.document.querySelector('.count-down-hours');\r\nconst countDownMinsInput = window.document.querySelector('.count-down-mins');\r\nconst countDownSecsInput = window.document.querySelector('.count-down-secs');\r\n\r\nconst countDownStartBtn = window.document.querySelector(\r\n  '.count-down-start-btn'\r\n);\r\n\r\nconst countDownPauseBtn = window.document.querySelector(\r\n  '.count-down-pause-btn'\r\n);\r\n\r\nconst countDownResetBtn = window.document.querySelector(\r\n  '.count-down-reset-btn'\r\n);\r\n\r\n// local variable for countdown timer\r\nlet time = 0;\r\nlet timer;\r\n\r\nconst disableElements = (...elements) =>\r\n  elements.forEach((ele) => ele.setAttribute('disabled', 'disabled'));\r\n\r\nconst enableElements = (...elements) =>\r\n  elements.forEach((ele) => ele.removeAttribute('disabled'));\r\n\r\nconst countDownDisplay = () => {\r\n  const hours = Math.floor(time / 3600);\r\n  const minutes = Math.floor((time - hours * 3600) / 60);\r\n  const seconds = Math.floor(time - hours * 3600 - minutes * 60);\r\n\r\n  countDownHoursInput.value = `${hours}`.padStart(2, '0');\r\n  countDownMinsInput.value = `${minutes}`.padStart(2, '0');\r\n  countDownSecsInput.value = `${seconds}`.padStart(2, '0');\r\n};\r\n\r\nconst startCountDown = () => {\r\n  time =\r\n    +countDownHoursInput.value * 3600 +\r\n    +countDownMinsInput.value * 60 +\r\n    +countDownSecsInput.value;\r\n\r\n  disableElements(\r\n    countDownHoursInput,\r\n    countDownMinsInput,\r\n    countDownSecsInput,\r\n    countDownStartBtn\r\n  );\r\n\r\n  enableElements(countDownPauseBtn, countDownResetBtn);\r\n\r\n  if (countDownStartBtn.textContent === 'Continue')\r\n    countDownStartBtn.textContent = 'Start';\r\n\r\n  timer = window.setInterval(() => {\r\n    time -= 1;\r\n    countDownDisplay();\r\n\r\n    // eslint-disable-next-line no-use-before-define\r\n    if (time === 0) finishCountDown();\r\n  }, 1000);\r\n};\r\n\r\nconst pauseCountDown = () => {\r\n  disableElements(countDownPauseBtn);\r\n  enableElements(countDownStartBtn);\r\n  window.clearInterval(timer);\r\n  countDownStartBtn.textContent = 'Continue';\r\n};\r\n\r\nconst resetCountDown = () => {\r\n  disableElements(countDownStartBtn, countDownPauseBtn, countDownResetBtn);\r\n  enableElements(countDownHoursInput, countDownMinsInput, countDownSecsInput);\r\n\r\n  if (countDownStartBtn.textContent === 'Continue') {\r\n    countDownStartBtn.textContent = 'Start';\r\n  }\r\n\r\n  window.clearInterval(timer);\r\n  time = 0;\r\n  countDownDisplay();\r\n};\r\n\r\nconst finishCountDown = () => {\r\n  window.clearInterval(timer);\r\n\r\n  disableElements(countDownStartBtn, countDownPauseBtn, countDownResetBtn);\r\n  enableElements(countDownHoursInput, countDownMinsInput, countDownSecsInput);\r\n\r\n  const audio = new Audio(alarmSound);\r\n  audio.play();\r\n};\r\n\r\n// add Events to our inputs Tags\r\ncountDownInputs.forEach((input) => {\r\n  // make input type text as input type number to show arrows on focus\r\n  input.addEventListener('focus', () => {\r\n    input.setAttribute('type', 'number');\r\n  });\r\n\r\n  // make input as type text to hide arrows\r\n  input.addEventListener('blur', () => {\r\n    // make validation for entered value\r\n    if (input.value === '' || input.value === '0') {\r\n      input.value = '00';\r\n    } else if (+input.value > +input.max) {\r\n      input.value = input.max;\r\n    }\r\n\r\n    // convert input  type number  to input text type to hide arrows which exist in number type\r\n    input.setAttribute('type', 'text');\r\n  });\r\n\r\n  // mak validation for input type number as there's a propblem in it can't execute maxlength attribuite\r\n  // dueo to (read this) https://stackoverflow.com/questions/18510845/maxlength-ignored-for-input-type-number-in-chrome\r\n  input.addEventListener('input', () => {\r\n    if (+input.value.length > +input.maxLength)\r\n      input.value = input.value.slice(0, input.maxLength);\r\n\r\n    if (\r\n      +countDownHoursInput.value > 0 ||\r\n      +countDownMinsInput.value > 0 ||\r\n      +countDownSecsInput.value > 0\r\n    ) {\r\n      enableElements(countDownStartBtn);\r\n    } else {\r\n      disableElements(countDownStartBtn, countDownPauseBtn, countDownResetBtn);\r\n    }\r\n  });\r\n});\r\n\r\n// Add click event to countDownStartBtn to handle  countDownStart start task.\r\ncountDownStartBtn.addEventListener('click', startCountDown);\r\n\r\n// Add click event to countDownPauseBtn to handle countDownStart pause task.\r\ncountDownPauseBtn.addEventListener('click', pauseCountDown);\r\n\r\n// Add click event to countDownResetBtn to handle countDownStart reset task.\r\ncountDownResetBtn.addEventListener('click', resetCountDown);\r\n\r\nexport const countdownTimerInit = () => {\r\n  disableElements(countDownStartBtn, countDownPauseBtn, countDownResetBtn);\r\n  countDownSecsInput.value = '';\r\n  countDownSecsInput.focus();\r\n};\r\n\r\n// Note: References:\r\n// 1)maxlength ignored for input type=\"number\" in Chrome\r\n// https://stackoverflow.com/questions/18510845/maxlength-ignored-for-input-type-number-in-chrome\r\n\r\n// 2) Can I hide the HTML5 number inputâ€™s spin box?\r\n// https://stackoverflow.com/questions/3790935/can-i-hide-the-html5-number-input-s-spin-box\r\n\r\n// 3) HTML text input allow only numeric input\r\n// https://stackoverflow.com/questions/469357/html-text-input-allow-only-numeric-input\r\n//  <input type=\"text\" oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*?)\\..*/g, '$1');\"\r\n//         value=\"00\" maxlength=\"2\" minlength=\"2\" />\r\n\r\n// oninput =\r\n//   'javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);';\r\n\r\n// https://www.geeksforgeeks.org/how-to-make-a-beep-sound-in-javascript/\r\n// Alert sounds  https://onlineclock.net/sounds/\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/IIFE\r\n","// Caching the needed Dom Elements\r\nconst currentYearElements = window.document.querySelectorAll('.current-year');\r\nconst currentYear = new Date().getFullYear();\r\n\r\n// auto update Current year functionality\r\nexport const autoUpdateCurrentYear = () => {\r\n  currentYearElements.forEach((ele) => {\r\n    ele.textContent = currentYear;\r\n  });\r\n};\r\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$c6f299c8ea33da7c$exports","URL","resolve","import","meta","url","toString","$d04944242fa5efe3$var$countDownInputs","window","document","querySelectorAll","$d04944242fa5efe3$var$countDownHoursInput","querySelector","$d04944242fa5efe3$var$countDownMinsInput","$d04944242fa5efe3$var$countDownSecsInput","$d04944242fa5efe3$var$countDownStartBtn","$d04944242fa5efe3$var$countDownPauseBtn","$d04944242fa5efe3$var$countDownResetBtn","$d04944242fa5efe3$var$timer","$d04944242fa5efe3$var$time","$d04944242fa5efe3$var$disableElements","elements","forEach","ele","setAttribute","$d04944242fa5efe3$var$enableElements","removeAttribute","$d04944242fa5efe3$var$countDownDisplay","hours","Math","floor","minutes","seconds","value","padStart","$d04944242fa5efe3$var$finishCountDown","clearInterval","Audio","$parcel$interopDefault","play","input","addEventListener","max","maxLength","slice","textContent","setInterval","$10e92eb9cd700234$var$currentYearElements","$10e92eb9cd700234$var$currentYear","Date","getFullYear","focus"],"version":3,"file":"index.45b7b835.js.map"}